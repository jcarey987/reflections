What happens when you initialize a repository? Why do you need to do it?

	Git begins the tracking of the files, and logging their versions with a unique
	name. It is a good idea to do this so that you have earlier versions to track
	down any issues you may come across.

How is the staging area different from the working directory and the repository? What 
value do you think it offers?

	The staging area differs from the working directory and repository in that it is
	an intermediary inbetween the two. By that, you select the files one by one from
	your working directory to place into the staging area, then you add all of the 
	files in the staging area to the repository.

How can you use the staging area to make sure you have one commit per logical change?

	You can use git diff --staged to review the changes that are being made compared to 
	the most recent commit. You are also able to confirm that all of the files you want
	to add are included, and ensure nothing extra is included.

What are some situations when branches would be helpful in keeping your history 
organized? How would branches help?

	Some situations when branches would be helpful in keeping your history organized
	would be when you wanted to run down a "rabbit hole."  What I mean by that is 
	when you want to TRY implementing a new feature or style, but you want to
	maintain the integrity of the master branch  before you reach a final verdict on
	the exploratory branch. This is helpful in that you maintain the integrity of the
	master branch if you decide not to implement the new feature.

How do the diagrams help you visualize the branch structure?

	Diagrams help me visualize the branch structure by graphically representing them in 
	a linear and non-linear manner. It helps me see parent commits and how they relate 
	to on another.

What is the result of merging two branches together? Why do we represent it in the diagram 
the way we do?

	The way I like to think of merging branches together is the one further off the master
	branch converges into the one that is closer, or the one that is more masterful. The 
	resulting product is code that implements all the changes made from two seperate 
	branches. We represent it in the diagram the way we do to show that the branch is 
	merging into the master branch, and will no longer continue in development.